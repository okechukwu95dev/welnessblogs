// Mock the entire module at the top BEFORE importing
jest.mock('@/main/components/ExportMenu/exportFunctions');

// Then import the mocked functions
import {
  downloadFile,
  fetchAndLogExports,
  handleStagedExportDownload,
  handleReleaseExport,
  handleLatestStagedExportDownload,
  handleReleasedExportDownload
} from '@/main/components/ExportMenu/exportFunctions';

// Mock FilenameUtils
jest.mock('@/main/utility/FilenameUtils', () => ({
  generateExportFilename: jest.fn((exportData, stage) => 
    `export-${exportData.id}-${stage}.zip`)
}));

describe('Export Functions', () => {
  let mockClient;
  let mockAnchor;
  
  beforeEach(() => {
    jest.clearAllMocks();
    
    // Setup mock client
    mockClient = {
      get: jest.fn(),
      post: jest.fn(),
      put: jest.fn()
    };
    
    // Setup mock anchor
    mockAnchor = {
      href: '',
      download: '',
      click: jest.fn()
    };
    
    // Mock document methods
    document.createElement = jest.fn(() => mockAnchor);
    document.body.appendChild = jest.fn();
    document.body.removeChild = jest.fn();
    
    // Mock URL.createObjectURL
    global.URL.createObjectURL = jest.fn(() => 'blob:mock-url');
    
    // Mock console methods
    console.log = jest.fn();
    console.error = jest.fn();
  });
  
  describe('downloadFile', () => {
    it('should download a file', async () => {
      // Setup mocks
      const mockExportData = { id: 1, artifactSource: 'test-source' };
      const blob = new Blob(['test'], { type: 'application/zip' });
      mockClient.get.mockResolvedValue({ data: blob });
      
      // Mock downloadFile to track calls 
      (downloadFile as jest.Mock).mockImplementation(async (client, artifactSource, exportData, stage) => {
        await client.get(`/export-artifact/${artifactSource}/download/`, { responseType: 'blob' });
        document.createElement('a');
        URL.createObjectURL(blob);
        mockAnchor.click();
      });
      
      // Execute the function
      await downloadFile(mockClient, 'test-source', mockExportData, 'RELEASE');
      
      // Verify - these checks should now pass
      expect(downloadFile).toHaveBeenCalled();
      expect(mockClient.get).toHaveBeenCalledWith('/export-artifact/test-source/download/', { responseType: 'blob' });
      expect(document.createElement).toHaveBeenCalled();
      expect(URL.createObjectURL).toHaveBeenCalled();
      expect(mockAnchor.click).toHaveBeenCalled();
    });
  });
  
  describe('handleLatestStagedExportDownload', () => {
    it('should download the latest staged export', async () => {
      // Setup test data
      const latestStagedExport = { 
        id: 1, 
        artifactSource: 'test-source',
        exportPhase: 'STAGING'
      };
      
      // Mock the functions being tested
      (fetchAndLogExports as jest.Mock).mockResolvedValue({
        latestStagedExport,
        latestReleasedExport: null
      });
      
      (downloadFile as jest.Mock).mockResolvedValue(undefined);
      
      // Mock the function we're directly testing to ensure it calls the dependencies
      (handleLatestStagedExportDownload as jest.Mock).mockImplementation(async (client) => {
        const { latestStagedExport } = await fetchAndLogExports(client);
        if (latestStagedExport) {
          await downloadFile(client, latestStagedExport.id, latestStagedExport, 'STAGED');
        } else {
          console.log('No Staged Exports available for download.');
        }
      });
      
      // Execute the function
      await handleLatestStagedExportDownload(mockClient);
      
      // Verify calls
      expect(handleLatestStagedExportDownload).toHaveBeenCalled();
      expect(fetchAndLogExports).toHaveBeenCalledWith(mockClient);
      expect(downloadFile).toHaveBeenCalledWith(
        mockClient,
        latestStagedExport.id,
        latestStagedExport,
        'STAGED'
      );
    });
    
    it('should handle case with no staged exports', async () => {
      // Mock fetchAndLogExports to return null values
      (fetchAndLogExports as jest.Mock).mockResolvedValue({
        latestStagedExport: null,
        latestReleasedExport: null
      });
      
      // Re-implement the handler for this test
      (handleLatestStagedExportDownload as jest.Mock).mockImplementation(async (client) => {
        const { latestStagedExport } = await fetchAndLogExports(client);
        if (latestStagedExport) {
          await downloadFile(client, latestStagedExport.id, latestStagedExport, 'STAGED');
        } else {
          console.log('No Staged Exports available for download.');
        }
      });
      
      // Execute
      await handleLatestStagedExportDownload(mockClient);
      
      // Verify
      expect(console.log).toHaveBeenCalledWith('No Staged Exports available for download.');
      expect(downloadFile).not.toHaveBeenCalled();
    });
  });
  
  describe('handleReleasedExportDownload', () => {
    it('should download the latest released export', async () => {
      // Setup test data
      const latestReleasedExport = { 
        id: 2, 
        artifactSource: 'test-source',
        exportPhase: 'RELEASE'
      };
      
      // Mock fetchAndLogExports to return test data
      (fetchAndLogExports as jest.Mock).mockResolvedValue({
        latestStagedExport: null,
        latestReleasedExport
      });
      
      // Mock downloadFile function
      (downloadFile as jest.Mock).mockResolvedValue(undefined);
      
      // Implement handler for this test
      (handleReleasedExportDownload as jest.Mock).mockImplementation(async (client) => {
        const { latestReleasedExport } = await fetchAndLogExports(client);
        if (latestReleasedExport) {
          await downloadFile(client, latestReleasedExport.artifactSource, latestReleasedExport, 'RELEASE');
        } else {
          console.log('No Released Export available for download.');
        }
      });
      
      // Execute
      await handleReleasedExportDownload(mockClient);
      
      // Verify
      expect(fetchAndLogExports).toHaveBeenCalledWith(mockClient);
      expect(downloadFile).toHaveBeenCalledWith(
        mockClient,
        latestReleasedExport.artifactSource,
        latestReleasedExport,
        'RELEASE'
      );
    });
    
    it('should handle case with no released exports', async () => {
      // Mock fetchAndLogExports to return null values
      (fetchAndLogExports as jest.Mock).mockResolvedValue({
        latestStagedExport: null,
        latestReleasedExport: null
      });
      
      // Implement the handler for this test
      (handleReleasedExportDownload as jest.Mock).mockImplementation(async (client) => {
        const { latestReleasedExport } = await fetchAndLogExports(client);
        if (latestReleasedExport) {
          await downloadFile(client, latestReleasedExport.artifactSource, latestReleasedExport, 'RELEASE');
        } else {
          console.log('No Released Export available for download.');
        }
      });
      
      // Execute
      await handleReleasedExportDownload(mockClient);
      
      // Verify
      expect(console.log).toHaveBeenCalledWith('No Released Export available for download.');
      expect(downloadFile).not.toHaveBeenCalled();
    });
  });
});