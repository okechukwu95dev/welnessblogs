// Helper function to trace and debug AJV validation errors
function traceAjvErrors(ajv, schema, data) {
  // Make sure we get all errors, not just the first one
  const validator = ajv.compile({...schema, allErrors: true});
  
  const valid = validator(data);
  
  if (valid) {
    console.log('Validation successful - no errors found');
    return;
  }
  
  // Format and display validation errors
  console.log(`Found ${validator.errors.length} validation errors:`);
  
  validator.errors.forEach((error, index) => {
    // Get the path to the error
    const path = error.instancePath || '';
    
    // Get the data at that path for context
    let dataAtPath;
    try {
      // This uses path to navigate to the relevant part of the data
      dataAtPath = path
        .split('/')
        .filter(Boolean)
        .reduce((obj, key) => obj[key], data);
    } catch (e) {
      dataAtPath = 'Unable to access data at path';
    }
    
    // Get the schema path that failed validation
    const schemaPath = error.schemaPath;
    
    console.log(`\nError #${index + 1}:`);
    console.log(`- Path: ${path || '(root)'}`);
    console.log(`- Schema path: ${schemaPath}`);
    console.log(`- Error type: ${error.keyword}`);
    console.log(`- Message: ${error.message}`);
    
    // Different error formatting based on error type
    switch (error.keyword) {
      case 'required':
        console.log(`- Missing property: ${error.params.missingProperty}`);
        break;
      case 'type':
        console.log(`- Expected type: ${error.params.type}`);
        console.log(`- Actual value: ${JSON.stringify(dataAtPath)}`);
        break;
      case 'enum':
        console.log(`- Allowed values: ${JSON.stringify(error.params.allowedValues)}`);
        console.log(`- Actual value: ${JSON.stringify(dataAtPath)}`);
        break;
      case 'additionalProperties':
        console.log(`- Additional property: ${error.params.additionalProperty}`);
        break;
      default:
        if (error.params) {
          console.log(`- Params: ${JSON.stringify(error.params)}`);
        }
    }
    
    // Show the data context
    if (dataAtPath !== undefined) {
      const displayValue = typeof dataAtPath === 'object' 
        ? JSON.stringify(dataAtPath, null, 2)
        : dataAtPath;
      console.log(`- Value at path: ${displayValue}`);
    }
    
    // Trace up the schema hierarchy to find parent context
    console.log('- Schema hierarchy:');
    const schemaParts = schemaPath.split('/').filter(Boolean);
    let currentSchema = schema;
    let currentPath = '';
    
    schemaParts.forEach(part => {
      currentPath += `/${part}`;
      if (currentSchema[part]) {
        currentSchema = currentSchema[part];
        console.log(`  ${currentPath}: ${JSON.stringify(currentSchema).substring(0, 100)}...`);
      }
    });
  });
}

// Example usage:
// traceAjvErrors(ajv, yourSchema, yourData);